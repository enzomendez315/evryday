enum MealPeriod {
  breakfast
  lunch
  dinner
  custom
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  name: String!
  age: Int
  height: Float
  weight: Float
}

type NutritionLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: AWSDate!
  Meals: [Meal] @hasMany
}

type Meal @model @auth(rules: [{allow: public}]) {
  id: ID!
  mealPeriod: MealPeriod!
  foodItems: [FoodItem] @hasMany
}

type FoodItem @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  serving: String
}

type ExerciseLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: AWSDate!
  exerciseRoutine: ExerciseRoutine
  exerciseType: ExerciseType
  durationMinutes: Int
  caloriesBurned: Int
}

type ExerciseRoutine @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: String!
  exercises: [ExerciseType] @hasMany
}

type ExerciseType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
}

type SleepLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: AWSDate!
  hoursSlept: Float!
  sleepQuality: Int
  restfulnessScore: Int
  dreamJournal: String
}

type HealthScore @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: String!
  score: Int!
}

type GoalLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  weight: Float!
  hoursSlept: Float!
  dailyCalories: Int!
  dailyExercise: Int!
}
 