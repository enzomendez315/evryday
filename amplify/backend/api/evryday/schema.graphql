type DailyGoals @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID
  minCalories: Int
  maxCalories: Int
  minSleep: Float
  dailyWorkout: Boolean
  proteinGoal: Int
  carbGoal: Int
  fatGoal: Int
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  name: String!
  age: Int
  height: Float
  weight: Float
  gender: String
}

type NutritionLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: AWSDate!
  Meals: [Meal] @hasMany
  waterIntake: Int
}

enum MealPeriod {
  Breakfast
  Lunch
  Dinner
  Snack
}

type Meal @model @auth(rules: [{allow: public}]) {
  id: ID!
  mealPeriod: MealPeriod!
  foodItems: [MealToFood] @hasMany(indexName: "byMeal", fields: ["id"])
}

type MealToFood @model @auth(rules: [{allow: public}]) {
  id: ID!
  mealId: ID! @index(name: "byMeal", sortKeyFields: ["foodId"])
  foodId: ID! @index(name: "byFood", sortKeyFields: ["mealId"])
  servingId: ID!
  servingAmount: Float!
  meal: Meal @belongsTo(fields: ["mealId"])
  foodItem: FoodItem @belongsTo(fields: ["foodId"])
}

type FoodItem @model @auth(rules: [{allow: public}]) {
  id: ID!
  owner: ID!
  name: String!
  meals: [MealToFood] @hasMany(indexName: "byFood", fields: ["id"])
  recipes: [RecipeToFood] @hasMany(indexName: "byFood", fields: ["id"])
  favoritedBy: [UserFavoriteFood] @hasMany
  servingOptions: [FoodItemServing] @hasMany
}

type FoodItemServing @model @auth(rules: [{allow: public}]) {
  id: ID!
  foodItem: FoodItem @belongsTo
  servingSize: Float!
  servingUnit: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
}

type UserFavoriteFood @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  foodItem: FoodItem @belongsTo
}

type Recipe @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  foodItems: [RecipeToFood] @hasMany(indexName: "byRecipe", fields: ["id"])
}

type RecipeToFood @model @auth(rules: [{allow: public}]) {
  id: ID!
  recipeId: ID! @index(name: "byRecipe", sortKeyFields: ["foodId"])
  foodId: ID! @index(name: "byFood", sortKeyFields: ["recipeId"])
  servingId: ID!
  servingAmount: Float!
  recipe: Recipe @belongsTo(fields: ["recipeId"])
  foodItem: FoodItem @belongsTo(fields: ["foodId"])
}

type ExerciseLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: AWSDate!
  exerciseRoutine: ExerciseRoutine
  durationMinutes: Int
  caloriesBurned: Int
  ExerciseRoutines: [ExerciseRoutine] @manyToMany(relationName: "ExerciseLogExerciseRoutine")
  ExerciseSets: [ExerciseSet] @manyToMany(relationName: "ExerciseLogExerciseSet")
}

type ExerciseSet @model @auth(rules: [{allow: public}]) {
  id: ID!
  reps: String
  time: String
  weight: String
  ExerciseType: [ExerciseType] @manyToMany(relationName: "ExerciseSetExerciseType")
  ExerciseRoutines: [ExerciseRoutine] @manyToMany(relationName: "ExerciseSetExerciseRoutine")
  exerciselogs: [ExerciseLog] @manyToMany(relationName: "ExerciseLogExerciseSet")
}

type ExerciseRoutine @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  name: String
  exerciselogs: [ExerciseLog] @manyToMany(relationName: "ExerciseLogExerciseRoutine")
  ExerciseTypes: [ExerciseType] @manyToMany(relationName: "ExerciseRoutineExerciseType")
  exercisesets: [ExerciseSet] @manyToMany(relationName: "ExerciseSetExerciseRoutine")
}

type ExerciseType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  target: String
  exercisesets: [ExerciseSet] @manyToMany(relationName: "ExerciseSetExerciseType")
  exerciseroutines: [ExerciseRoutine] @manyToMany(relationName: "ExerciseRoutineExerciseType")
}

type SleepLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: AWSDate!
  hoursSlept: Float!
  sleepQuality: Int!
  dreamJournal: String
  restfulnessScore: Int!
}

type HealthScore @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  date: String!
  score: Int!
}

type GoalLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID!
  weight: Float!
  hoursSlept: Float!
  dailyCalories: Int!
  dailyExercise: Int!
}
 